local f = function(a) {
	print(a);
};

f('gigi');

function gen() {
	local i = 0;
	return function() {
		i = i + 1;
		return i;
	};
}

local g = gen();
print(g);
print(g());
print(g());

function thrice(fn) {
  for (local i = 1; i <= 3; i = i + 1) {
    fn(i);
  }
}

thrice(function (a) {
  print(a);
});

function () {};

class c1 {
	method1() {
		return;
	}
}

interface intf {
	test1();

	default runTest() {
		local t = this:test1();
		return t;
	}
}

class I1 extends Iterator {
	local size;
	local cnt;

	I1(size) {
		this:size = size;
		this:cnt = 0;
	}

	hasNext() {
		return (this:cnt < this:size);
	}

	next() {
		this:cnt = this:cnt + 1;
		return 43;
	}

	remove() {
		throw Exception('Not implemented');
	}
}
local i = I1(42);
print(i:count());
print(i:isEmpty());