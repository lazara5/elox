
function iter(a, i) {
	if (i < a.length()) {
		local v = a[i];
		i = i + 1;
		return i, v;
	}
	return nil;
}

function ipairs (a) {
	return iter, a, 0;
}

function iterator(a) {
	local i = 0;
	return function() {
		if (i < a:length()) {
			i = i + 1;
			return a[i- 1];
		}
		return nil;
	};
}

class IterableIterator implements Iterator {
	local iterable;
	local crt;

	IterableIterator(iterable) {
		this:iterable = iterable;
		this:crt = 0;
	}

	hasNext() {
		return this:crt < this:iterable:arr:length();
	}

	next() {
		this:crt = this:crt + 1;
		return this:iterable:arr[this:crt - 1];
	}

	remove() {
		throw Exception("Not supported");
	}
}

class MyIterable implements Iterable {
	class IterableIterator1 implements Iterator {
		local iterable;
		local crt;

		IterableIterator(iterable) {
			this:iterable = iterable;
			this:crt = 0;
		}

		hasNext() {
			return this:crt < this:iterable:arr:length();
		}

		next() {
			this:crt = this:crt + 1;
			return this:iterable:arr[this:crt - 1];
		}

		remove() {
			throw Exception("Not supported");
		}
	}

	local arr;

	MyIterable() {
		this:arr = [7, 8, 9];
	}

	iterator() {
		return IterableIterator(this);
	}
}

local inst = MyIterable();

local array = [4, 5, 6];
local a1 = iterator(array);
local a;
local x = 0;
#foreach(a, local b in array) {
foreach(a, local b in inst) {
#foreach(a, local b in iterator(array)) {
#foreach(a, local b in ipairs(array)) {
	print('>', x, [a, b]);
	x = x + 1;
}

print('1 ------');

local map = {a = 42, b = 533};
print(map.a);
print(map:size());
local sm = map:size;
print(sm);

print(array:length);

print('2 ------');

try {
	foreach(local k, local v in map) {
		map.c = 32;
		print(k, v);
	}
} catch (Exception e) {
	print(e:message);
}
